#lang sicp

(define (pascal n)
  (define (triangular? n)
  (define (triangular-iter counter test)
    (cond ((> test n) #f)
          ((= n test) #t)
          (else (triangular-iter (+ counter 1)
                                 (+ counter test)))))
  (triangular-iter 2 1))
  (define (pascal-row n)
  (define (row-iter row count reset-counter)
    (cond ((= n count) row)
          ((= row reset-counter) (row-iter (+ row 1)
                                          (+ count 1)
                                          1))
          (else (row-iter row
                          (+ count 1)
                          (+ reset-counter 1)))))
  (row-iter 1 1 1))
  (cond ((triangular? n) 1)
        ((triangular? (- n 1)) 1)
        (else (+ (pascal (- n (pascal-row n)))
                 (pascal (+ (- n (pascal-row n)) 1))))))